Q5. What is Callback?
Answer:-A **callback** is a function that is passed as an argument to another function and is then invoked or "called back" at a certain point in that function's execution. Callbacks are widely used in JavaScript, particularly for handling asynchronous operations, such as network requests, file reading, and user input handling.

### How Callbacks Work

In JavaScript, functions are "first-class citizens," meaning they can be assigned to variables, passed as arguments to other functions, and returned from functions. This ability to pass functions as arguments enables callbacks. 

### Synchronous and Asynchronous Callbacks

1. **Synchronous Callbacks**: These are executed immediately within the same function call. They run sequentially, meaning the callback function is called as soon as the main function completes or reaches a certain point.
   - **Example**:
     ```javascript
     function greet(name) {
         console.log(`Hello, ${name}!`);
     }

     function processUserInput(callback) {
         const name = "Alice";
         callback(name);
     }

     processUserInput(greet); // Output: Hello, Alice!
     ```
     In this example, `greet` is a synchronous callback that is immediately executed by `processUserInput`.

2. **Asynchronous Callbacks**: These are used for operations that may take time to complete, like API calls, reading files, or setTimeout. In this case, the main function can continue executing, and the callback is executed once the asynchronous operation completes.
   - **Example**:
     ```javascript
     function fetchData(callback) {
         setTimeout(() => {
             const data = "Here is the data";
             callback(data);
         }, 2000); // Simulates a 2-second delay
     }

     function displayData(data) {
         console.log(data);
     }

     fetchData(displayData); // Output after 2 seconds: Here is the data
     ```
     Here, `fetchData` simulates an asynchronous operation, and `displayData` is passed as a callback to handle the data when it becomes available.

### Why Callbacks Are Useful
Callbacks allow JavaScript to handle asynchronous events without blocking the main thread, which is especially important in web applications where responsiveness is key. They let JavaScript continue executing other code while waiting for an operation to complete, then execute the callback function when the data or event is ready.

### Common Use Cases for Callbacks

- **Event Handling**: JavaScript uses callbacks extensively in event handling, such as responding to user clicks, keyboard inputs, or other events on a webpage.
  ```javascript
  document.getElementById("button").addEventListener("click", () => {
      console.log("Button was clicked!");
  });
  ```

- **Network Requests**: Callbacks are used to handle responses from API calls or other network operations.
  ```javascript
  fetch("https://api.example.com/data")
      .then(response => response.json())
      .then(data => console.log(data));
  ```

- **Timers**: Functions like `setTimeout` and `setInterval` use callbacks to execute code after a specified delay.
  ```javascript
  setTimeout(() => {
      console.log("This message appears after 2 seconds");
  }, 2000);
  ```

### Callbacks vs. Promises and Async/Await
Callbacks are essential to asynchronous programming in JavaScript, but as codebases grow, nested callbacks (also known as "callback hell") can make the code difficult to read and maintain. To solve this, JavaScript introduced **Promises** and later **async/await** syntax, which provide cleaner ways to handle asynchronous operations.

**Example using Promises**:
```javascript
fetch("https://api.example.com/data")
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error("Error:", error));
```

**Example using async/await**:
```javascript
async function fetchData() {
    try {
        const response = await fetch("https://api.example.com/data");
        const data = await response.json();
        console.log(data);
    } catch (error) {
        console.error("Error:", error);
    }
}

fetchData();
```

### Summary

A callback is a function passed as an argument to another function to be executed after the completion of an asynchronous or synchronous operation. Callbacks are crucial for handling events, asynchronous operations, and managing non-blocking code in JavaScript.