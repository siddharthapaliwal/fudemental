Q1 : What is the difference between Java & JavaScript?
Answers:-Java and JavaScript are both popular programming languages but are distinct in their design, purpose, and application. Despite their similar names, they serve different roles in software development. Here’s a breakdown of the key differences:

### 1. **Origin and History**
   - **Java**: Developed by Sun Microsystems (now owned by Oracle) in 1995, Java was designed as a general-purpose, object-oriented programming language for building standalone applications, especially on servers.
   - **JavaScript**: Created by Netscape in 1995 by Brendan Eich, JavaScript was initially designed as a lightweight, client-side scripting language to add interactivity to websites. It has evolved to include server-side capabilities through frameworks like Node.js.

### 2. **Syntax and Structure**
   - **Java**: A strongly typed, compiled language, requiring explicit declarations of variable types (like `int`, `double`, `String`). Java follows an Object-Oriented Programming (OOP) paradigm strictly, with concepts like classes and inheritance built-in.
   - **JavaScript**: A loosely typed, interpreted language with dynamic typing, which means variables can hold different types of data at different times. JavaScript also supports OOP but is more flexible with its prototype-based inheritance model.

### 3. **Execution Environment**
   - **Java**: Runs in a virtual environment, the Java Virtual Machine (JVM), which allows it to be platform-independent (“write once, run anywhere”). Java applications are compiled to bytecode, which the JVM interprets and executes.
   - **JavaScript**: Traditionally ran only in web browsers (client-side), where it’s interpreted by the browser’s JavaScript engine. Now, with platforms like Node.js, JavaScript can run on servers as well, giving it full-stack capabilities.

### 4. **Usage and Application**
   - **Java**: Primarily used for building large-scale, complex applications like enterprise software, Android mobile apps, server-side applications, and backend systems. It is known for its scalability and reliability in high-performance environments.
   - **JavaScript**: Originally intended for creating dynamic and interactive elements in web pages (e.g., animations, form validation). It’s now used widely on both the frontend and backend (e.g., with Node.js), and can also build mobile apps, desktop apps, and even games.

### 5. **Concurrency Model**
   - **Java**: Uses multi-threading, where multiple threads can be created within a single process. Java’s concurrency model is based on threads and locks.
   - **JavaScript**: Based on an event-driven, non-blocking model, often using asynchronous programming and a single-threaded event loop. This is particularly suited to I/O-heavy tasks, like handling HTTP requests.

### 6. **Performance**
   - **Java**: Generally faster for computationally intensive tasks, as it’s compiled to bytecode and optimized by the JVM. Java’s performance makes it suitable for large applications where high throughput is required.
   - **JavaScript**: Slower for heavy computations compared to Java, as it’s an interpreted language. However, modern JavaScript engines (like V8 in Chrome and Node.js) and Just-In-Time (JIT) compilation have significantly improved JavaScript’s performance, especially in web and I/O-bound applications.

### 7. **Libraries and Ecosystem**
   - **Java**: Has a vast standard library (Java Standard Library) and a wide array of frameworks like Spring, Hibernate, and Apache Struts for backend and enterprise applications.
   - **JavaScript**: Has a rich ecosystem for web development, with libraries and frameworks like React, Angular, Vue.js (frontend) and Express, NestJS (backend). The Node Package Manager (NPM) repository provides access to countless packages.

### 8. **Compilation vs. Interpretation**
   - **Java**: Compiled language (code is compiled into bytecode before it runs), which can be more efficient and secure.
   - **JavaScript**: Interpreted language in the traditional browser environment. Modern JavaScript engines use JIT compilation to improve performance but remain largely interpreted.

### Summary
| Aspect                   | Java                                          | JavaScript                                  |
|--------------------------|-----------------------------------------------|---------------------------------------------|
| **Type**                 | Compiled, strongly typed                     | Interpreted, loosely typed                  |
| **Execution**            | JVM (platform-independent)                   | Browser/Node.js (originally client-side)    |
| **Primary Use**          | Backend, standalone apps, Android apps       | Web development (front-end and back-end)    |
| **Concurrency Model**    | Multi-threading                              | Single-threaded, event-driven               |
| **Syntax**               | Rigid, class-based OOP                       | Flexible, prototype-based OOP               |

Both Java and JavaScript have their strengths, and the choice between them depends on the use case, application requirements, and the development environment.